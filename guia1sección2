eje20 m1.
"1.1 a"
x := Array with: 1 with: 2 with: 3 with: 4  .
x at: 1 put: 47 .
"no se puede agregar un elemento si ya esta creado el array "

"1.1 b"

y := OrderedCollection with: 4 with: 3 with: 2 with: 1 .

y add: 42 .
y add: 2 .
y count: [:z | z=2] . 

"1.1 c"

z := Set with: 4 with: 3 with: 2 with: 1 .

z add: 2 .
z add: 42 .
z size  .
z occurrencesOf: 2 . 1 .

"1.1 d"
d := Dictionary new.
d add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.
d add: #e->42
d keys .
d values  .
d associationAt: #a .
d associationAt: #z  ifAbsent: [24].

"1.2"
newOCollection := OrderedCollection  new .
x do: [:e| newOCollection add: e] . 
newSet := Set new .
x do: [:e | newSet add: e ] . 
z array   .
d array  .

"1.3"
| elements index odds |
elements:= #(1 2 5 6 9).
odds := OrderedCollection new.
index := 1.
[index <= elements size]
whileTrue: [
((elements at: index) odd) ifTrue: [odds add: (elements at: index)].
index := index +1.
].
^odds

"1.7"
"El único problema que noto es que tiene código repetido en la guarda del whileTrue y del ifTrue"

"1.8"

elements1:= #(1 2 5 6 9).
odds1 := OrderedCollection new.
 elements1 do: [:e| (e even) ifTrue: [odds1 add: e] ifFalse: [odds1 ] ] .
^odds1 

"1.9"


elements1:= #(1 2 5 6 9).
odds2 := OrderedCollection new.
odds2 := elements1 asOrderedCollection . 
 odds2 select: [:e | (e even) not ]. 
"la ventaja que tiene es que no usamos if's" 

"1.10"

elements1:= #(1 2 5 6 9).
index1:= 1 .
[index1 <= elements1 size] whileTrue: [elements1 at: index1 put: ((elements1 at: index1) * 2) . index1 := index1 + 1]

"1.11"

elements1:= #(1 2 5 6 9).
elements2:= #(1 2 5 6 9).
index2 := 1 .
 elements1 do: [:e | elements2 at: index2 put: e*2 . index2:= index2 + 1] .

"1.12"

"1.13 y 1.14"

elements1:= #(1 3 5 7 9).
index3 := 1 .
[index3 <= elements1 size] whileTrue: [((elements1 at: index3) even) ifTrue: [^elements1 at: index3] ifFalse: [index3 := index3 + 1] ]  "devuelve nil si no hay pares"

elements1 do: [:e | (e even) ifTrue: [^e]]. "devuelve la colección si no hay pares"
elements1  detect: [:e | (e even) ] "da error si no hay pares"

"1.15"
elements1:= #(1 2 5 7 9).
index3 := 1 .
[index3 <= elements1 size] whileTrue: [((elements1 at: index3) even) ifTrue: [^elements1 at: index3] ifFalse: [index3 := index3 + 1] ]  .
^ elements1 error: 'no hay pares'  .

elements1 do: [:e | (e even) ifTrue: [^e]]. 
^ elements1 error: 'no hay pares' .
elements1  detect: [:e | (e even) ] ifNone: [elements1 error: 'No hay pares']  

"1.16"

elements1:= #(1 2 5 7 9).
index3 := 1 .
sum := 0 .
[index3 <= elements1 size] whileTrue: [sum := sum + elements1 at: index3 . index3 := index3 + 1]

elements1 do: [:e | sum := sum + e ] . ^sum

elements1 inject: 0 into: [:a :b | a + b]

elements1 reduce: [:a : b | a+ b] "con este se refiere al mensaje de suma?"

"1.18"

word := 'abcdefguijp' .
word select: [:letter | letter isVowel]   .  

"2"
"a. no encunetro el libro"

"b.  aBlock value devuelve la evaluación de aBlock con todas sus variables libres, ligadas"
"c"
| x1 |
x1 := [ y1 := 1. z1 := 2. ].
x1 value  "devuelve el último valor dentro del bloque" 

"d"
| x2 |
x2 := [ y2 := 1. z2 := 2. ].
x2 value.
y2.  "si mencionamos la variable definida dentro del bloque el entorno también la reconoce fuera del mismo"

"e"
| x3 y3 |
x3 := [ y3 := 1. z3 := 2. ].
x3 value.
y3. "si mencionamos una variable declarada fuera del bloque,dentro del bloque la sigue reconociendo"

"f"
aBlock1 := [:x :y | x + y ] .
aBlock1 value: 1 value: 2


"3"
| x4 y4 |
x4 := #pepe .
y4 := #pepe .
x4 = y4 .
#Hello , #World, #!  " 'HelloWorld!' " .


"4"

"4.2"
10 * peso + 10 * dollar  .
"esperado : 20* dollar"
"obtenido: mensajeNotUnderstood" 

10 * peso +( 10 * dollar) . "10 * dollars+10 * pesos" .
10 * peso +( 10 * dollar) - (2 * dollar)
10 * peso +( 10 * dollar) - (2 * dollar) - (8 * dollar)


"...."
"4.8"
peso := BaseUnit nameForOne: 'peso' nameForMany: 'pesos' sign: $$ .
"4.9"


metros := BaseUnit nameForOne: 'metro' nameForMany: 'metros' sign: m .
centimetros := ProportionalDerivedUnit baseUnit: metros conversionFactor: 1/100 named: 'centimetros' .
(10 * metros) + (500 * centimetros) . 
"4.10"


pulgadas := ProportionalDerivedUnit baseUnit: metros conversionFactor: 1/(39.37) named:  'pulgadas'.
(10* metros) + (60 * pulgadas)  . 11.524003048006096 * metros .

"4.10"
"4.11"
"5."
DateAndTime fromSeconds: 0.
(DateAndTime fromSeconds: 0) + (Duration days: 1).
Time now.
Time hour: 1 minute: 2 second: 4.
Time now + (Duration hours: 1) "FALLA porque no es un timespan"
(DateAndTime fromSeconds: 0) + (Duration days: 1).
Date today.
Date newDay: 1 month: 2 year: 3 .

FixedGregorianDate today.
FixedGregorianDate today next next.
GregorianDateTime now.
GregorianDateTime now next. "que hace esto"
GregorianDateTime now next distanceFrom: GregorianDateTime now.
(GregorianDateTime now next distanceFrom: GregorianDateTime now) convertTo: second /
millisecond.
TimeOfDay now.
TimeOfDay now next: (30 * hour). "no funca"
FixedGregorianDate today year.
FixedGregorianDate today month.
FixedGregorianDate today monthOfYear.

"5.3"
Date today + 24 seconds .  "no se si se referia a eso"

"5.4"
Date today + 86400 seconds .
"5.5"
 2024 isLeap . "mensage notUnderstood"
 (April, 2024) year isLeap . "funca"

"5.6"

TimeOfDay now next  3600 "no entiendo bien que se quiere obtener en la expresión original por ende no se como corregirlo para que funcione de esa forma,pero si le sacamos el 3600 ya anda"